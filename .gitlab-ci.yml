image: guillaumebriday/ruby-node:2.6.3

stages:
  - test
  - build
  - review
  - deploy

variables:
  POSTGRES_DB: app_production
  IMAGE_TAG: registry.gitlab.com/guillaumebriday/rails-tailwindcss-starter:$CI_COMMIT_REF_SLUG
  REGISTRY_URL: registry.gitlab.com

# Cache gems in between builds
cache:
  paths:
    - vendor/ruby
    - node_modules

# Stage: Test
rubocop:
  stage: test
  script:
  - bundle install -j $(nproc) --path vendor --quiet  # Install dependencies into ./vendor/ruby
  - bundle exec rubocop

tests:
  stage: test
  variables:
    POSTGRES_DB: rails-tailwindcss-starter_test
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
    RAILS_ENV: test

  services:
    - postgres:11-alpine

  before_script:
    - gem install bundler --no-document
    - bundle install -j $(nproc) --path vendor --quiet  # Install dependencies into ./vendor/ruby

  script:
    - bundle exec rails db:migrate
    - bundle exec rails db:seed
    - bundle exec rake assets:precompile
    - bundle exec rails test

# Stage: Build
build_image:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - echo "${RAILS_MASTER_KEY}" > config/master.key
    - docker build -f .cloud/docker/Dockerfile -t ${IMAGE_TAG} .
    - docker push $IMAGE_TAG

# Stage: review
.setup_deploy_env: &setup_deploy_env
  image: kroniak/ssh-client
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H 'guillaumebriday.xyz' >> ~/.ssh/known_hosts

review_app:
  <<: *setup_deploy_env
  stage: review
  script:
    # log into Docker registry
    - ssh root@guillaumebriday.xyz "docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${REGISTRY_URL}"
    - ssh root@guillaumebriday.xyz "docker pull ${IMAGE_TAG}"

    # stop containers, remove image.
    - ssh root@guillaumebriday.xyz "docker stop app_${CI_COMMIT_REF_SLUG} db_${CI_COMMIT_REF_SLUG}" || true

    # start new containers
    - ssh root@guillaumebriday.xyz \
      "docker run --rm --name db_${CI_COMMIT_REF_SLUG} -e POSTGRES_DB=${POSTGRES_DB} -e POSTGRES_PASSWORD=secret -d postgres:11"
    - ssh root@guillaumebriday.xyz \
      "docker run --rm --name app_${CI_COMMIT_REF_SLUG} --link db_${CI_COMMIT_REF_SLUG} -e DB_HOST=db_${CI_COMMIT_REF_SLUG} -d -l traefik.frontend.rule=Host:${CI_COMMIT_REF_SLUG}.guillaumebriday.xyz ${IMAGE_TAG}"
  only:
    - branches
  except:
    - master
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_COMMIT_REF_SLUG.guillaumebriday.xyz/
    on_stop: stop_review_app

stop_review_app:
  <<: *setup_deploy_env
  stage: review
  variables:
    GIT_STRATEGY: none
  script:
    - ssh root@guillaumebriday.xyz "docker stop app_${CI_COMMIT_REF_SLUG} db_${CI_COMMIT_REF_SLUG}" || true
    - ssh root@guillaumebriday.xyz "docker rmi ${IMAGE_TAG}" || true
  when: manual
  only:
    - branches
  except:
    - master
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop

# Stage: deploy
deploy_staging:
  <<: *setup_deploy_env
  stage: deploy
  script:
    # log into Docker registry
    - ssh root@guillaumebriday.xyz "docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${REGISTRY_URL}"
    - ssh root@guillaumebriday.xyz "docker pull ${IMAGE_TAG}"

    # stop containers, remove image.
    - ssh root@guillaumebriday.xyz "docker stop app_staging db_staging" || true

    # start new containers
    - ssh root@guillaumebriday.xyz \
      "docker run --rm --name db_staging -e POSTGRES_DB=${POSTGRES_DB} -e POSTGRES_PASSWORD=secret -d postgres:11"
    - ssh root@guillaumebriday.xyz \
      "docker run --rm --name app_staging --link db_staging -e DB_HOST=db_staging -d -l traefik.frontend.rule=Host:staging.guillaumebriday.xyz ${IMAGE_TAG}"
  only:
    - master
  when: manual
  environment:
    name: staging
    url: https://staging.guillaumebriday.xyz/


deploy_prod:
  <<: *setup_deploy_env
  stage: deploy
  script:
    # log into Docker registry
    - ssh root@guillaumebriday.xyz "docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${REGISTRY_URL}"
    - ssh root@guillaumebriday.xyz "docker pull ${IMAGE_TAG}"

    # stop containers, remove image.
    - ssh root@guillaumebriday.xyz "docker stop app_production db_production" || true

    # start new containers
    - ssh root@guillaumebriday.xyz \
      "docker run --rm --name db_production -e POSTGRES_DB=${POSTGRES_DB} -e POSTGRES_PASSWORD=secret -d postgres:11"
    - ssh root@guillaumebriday.xyz \
      "docker run --rm --name app_production --link db_production -e DB_HOST=db_production -d -l traefik.frontend.rule=Host:rails-tailwindcss-starter.guillaumebriday.xyz ${IMAGE_TAG}"
  only:
    - master
  when: manual
  environment:
    name: production
    url: https://rails-tailwindcss-starter.guillaumebriday.xyz/
